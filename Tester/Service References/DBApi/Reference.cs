//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.34209
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tester.DBApi {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://pegasus.co.ug/", ConfigurationName="DBApi.ServiceSoap")]
    public interface ServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pegasus.co.ug/ExecuteInsert", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        Tester.DBApi.Result ExecuteInsert(string conString, string storedProcedureName, object[] Parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pegasus.co.ug/ExecuteInsert", ReplyAction="*")]
        System.Threading.Tasks.Task<Tester.DBApi.Result> ExecuteInsertAsync(string conString, string storedProcedureName, object[] Parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pegasus.co.ug/ExecuteSelect", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        System.Data.DataTable ExecuteSelect(string conString, string storedProcedureName, object[] Parameters);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://pegasus.co.ug/ExecuteSelect", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> ExecuteSelectAsync(string conString, string storedProcedureName, object[] Parameters);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "4.0.30319.34230")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://pegasus.co.ug/")]
    public partial class Result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string statusCodeField;
        
        private string statusDescField;
        
        private string numberOfRowsAffectedField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string StatusCode {
            get {
                return this.statusCodeField;
            }
            set {
                this.statusCodeField = value;
                this.RaisePropertyChanged("StatusCode");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string StatusDesc {
            get {
                return this.statusDescField;
            }
            set {
                this.statusDescField = value;
                this.RaisePropertyChanged("StatusDesc");
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public string NumberOfRowsAffected {
            get {
                return this.numberOfRowsAffectedField;
            }
            set {
                this.numberOfRowsAffectedField = value;
                this.RaisePropertyChanged("NumberOfRowsAffected");
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ServiceSoapChannel : Tester.DBApi.ServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceSoapClient : System.ServiceModel.ClientBase<Tester.DBApi.ServiceSoap>, Tester.DBApi.ServiceSoap {
        
        public ServiceSoapClient() {
        }
        
        public ServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public Tester.DBApi.Result ExecuteInsert(string conString, string storedProcedureName, object[] Parameters) {
            return base.Channel.ExecuteInsert(conString, storedProcedureName, Parameters);
        }
        
        public System.Threading.Tasks.Task<Tester.DBApi.Result> ExecuteInsertAsync(string conString, string storedProcedureName, object[] Parameters) {
            return base.Channel.ExecuteInsertAsync(conString, storedProcedureName, Parameters);
        }
        
        public System.Data.DataTable ExecuteSelect(string conString, string storedProcedureName, object[] Parameters) {
            return base.Channel.ExecuteSelect(conString, storedProcedureName, Parameters);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> ExecuteSelectAsync(string conString, string storedProcedureName, object[] Parameters) {
            return base.Channel.ExecuteSelectAsync(conString, storedProcedureName, Parameters);
        }
    }
}
